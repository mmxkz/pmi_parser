require 'restclient'

class PmiGrabberJob < ApplicationJob
  PMI_URL = "https://certification.pmi.org/registry.aspx".freeze
  VIEWSATE = ''.freeze

  queue_as :pmi_parser

  def perform(letter='A')
    if page = RestClient.post( PMI_URL, { '__VIEWSTATE' => VIEWSATE,
                                          'dph_RegistryContent$tbSearch' => letter,
                                          'dph_RegistryContent$wcountry' => 'RUS'})
      puts "Success get page for letter: #{letter}"
      filename = "parsed_pages/pmi-#{letter}.html"
      File.open(filename, 'w') do |f|
        f.write page.body
      end
      PmiParserJob.perform_now(filename)
    end
  end
end
